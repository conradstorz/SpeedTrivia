# -*- coding: utf-8 -*-
"""SpeedTriva takes input from individual players via SMS using Twillio service.
Players can send their name by text and get back the names of their teammates.
Teams are "Randomly" assigned. 
This app tracks players from past events and strives to assign players together
that have not been at the same table before (like speed dating). 
Player can provide their personal name to the app and include a +1 (or +2 or more) 
to their name to reserve extra seats at their table.
FUNCTIONALITY:
    Incoming SMS;
        First ever incoming SMS becomes Control-Node.
            After that all new numbers are considered players.
                (Control is also player)
        Players can provide details like:
            Name, Team Size(are they alone or have brought partner(s)), 
            Whois (responds with names of other players assigned to table),
            Decline (Ask to be reassigned to different table),
            Team-Name (set it or ask for it), Name-suggestions (offer silly team name),
        Control can provide same as above, plus;
            Shuffle (re-shuffles players), Set-size (set the target size of each table),
            Table-list (returns list of all players and assignments),
            Send-Assignments (sends each player their tablename (e.g. epsilon, gamma, delta...)),

MINIMUM FUNCTIONALITY:
    Default table size equals 4.
    Incoming SMS is placed in the database and body of SMS is used as name and +n value.
        duplicate SMS phone numbers just updates the name and +n values.
    Control can Shuffle tables and send assignments to players.
    No stateful memory is needed between nights a this level.

CRAZY FUTURE FUNCTIONALITY:
    Player can provide the answer to the trivia question by SMS and SpeedTrivia will submit it 
    to the trivia host by filling in the jotform used for answers that night.

    Controller can provide actual answers for storage in the database and matching to the provided
    answers from the teams to keep score automatically within the app. (Alternately the player can
    tell SpeedTrivia when they get a question right so the score can be kept.)

# NOTE: On 4-8-2021 I decided to use PythonAnywhere.com to host this code. 
    It can be accessed at Conradical.pythonanywhere.com/sms
    Twilio.com sends incoming texts from the number (812)203-8235 to the address above.
    The resulting string generated by sms_reply() is then returned to the player.
    An empty string from sms_reply() returns nothing and generates no return text.
    At this time I do not use environment variables at PA.com
    I simply cut and paste the un-encrypted secrets into the code at PA.com
    That code doesn't get pushed to GIT ever so the secrets are fairly safe.

# NOTE: Reading the Twilio website I learned about ngrok.exe
    ngrok is available for all computer platforms and creates tunnels from localhost to the public internet.
    Using ngrok allows testing servers like flask running on localhost with internet resources like Twilio.
    During developement of a webapp like SpeedTriva ngrok allows me to point Twilio at my localhost for testing.
    Deployment to production can then point Twilio back to Conradical.pythonAnywhere.com 
    
"""


import datetime as dt
import sys
from pprint import pformat as pprint_dicts

import pytz
from flask import Flask, redirect, request
from loguru import logger

from ST_common import *
from ST_Twilio import Send_SMS
from Webform_filler import Check_for_webform_answer_submission


@logger.catch
def Respond_to(msid, sms_from, body_of_sms):
    """Takes incoming SMS details and determines correct response.

    Args:
        msid (str)): Twilio message ID
        sms_from (str): 12 character phone number
        body_of_sms (str): Actual text os incoming SMS

    Returns:
        str: The string sent back to the caller.
    """
    response = update_caller_database(msid, sms_from, body_of_sms)
    if (
        response
        == "Hello! I don't have your number in my records. Could you please tell me your name?"
    ):
        return response
    logger.info(pprint_dicts(players_database[sms_from]))
    cmnds = COMMANDS.keys()
    # logger.info(cmnds)
    for word in cmnds:
        command_slice = str(body_of_sms).lower()[: len(word)]
        # logger.debug(f'SMS slice from front of text: {command_slice}')
        if word.lower() == command_slice:
            # ALTERNATE APPROACH: Ensure that only whole words are matched.
            # search = word.lower()
            # strn = str(body_of_sms).lower()
            # matches = re.findall(r"\b" + search + r"\b", strn)
            # matches is a list of each match.
            logger.info(f"Found command: {word}")
            # slice off command from front of string
            action_value = body_of_sms[len(word) :]
            logger.debug(f"Command action value is: {action_value}")
            logger.debug(f"Attempting to call function: {COMMANDS[word]}")
            if word in CONTROLLER_ONLY_COMMANDS:
                if sms_from == CONTROLLER:
                    response = COMMANDS[word](msid, sms_from, action_value)
                else:
                    logger.info("Command not available to this user.")
                    response = "Sorry, That command is only available to the CONTROLLER of this app."
            else:
                response = COMMANDS[word](msid, sms_from, action_value)
            # break loop here to stop after first command word found.
            break
        else:
            pass
            # logger.debug(f"Did not find '{word}' in '{body_of_sms}'")
    else:
        logger.info("No command words found in this SMS.")
        logger.debug(f"Checking for a trivia answer form in SMS...")
        if TESTING:
            response = "System under test."
            print(
                Check_for_webform_answer_submission(
                    msid,
                    sms_from,
                    body_of_sms,
                    players_database[sms_from][CURRENT_TEAM_NAME],
                    Send=False,
                )
            )
        else:
            # TODO Ensure that the function below does not fail silently due to bad data in body_of_sms
            response = Check_for_webform_answer_submission(
                msid,
                sms_from,
                body_of_sms,
                players_database[sms_from][CURRENT_TEAM_NAME],
                Send=True,
            )
    return response


@logger.catch
def update_caller_database(msid, sms_from, body_of_sms):
    response = f"The Robots are coming!  LoL  Head for the hills {players_database[sms_from][CALLERNAME]}"
    players_database[sms_from][MESSAGE_HISTORY].append((body_of_sms, msid))
    messages_list = players_database[sms_from][MESSAGE_HISTORY]
    # truncate list at last 5 messages.
    players_database[sms_from][MESSAGE_HISTORY] = messages_list[-5:]
    logger.info(f"Caller's Name: {players_database[sms_from][CALLERNAME]}")
    if players_database[sms_from][FIRSTCALL] == None:
        logger.info("First time caller.")
        Send_SMS("New Caller logged.", CONTROLLER)
        players_database[sms_from][FIRSTCALL] = dt.datetime.now(pytz.timezone("UTC"))
        response = ask_caller_their_name()
        players_database[sms_from][RECENTCALL] = dt.datetime.now(pytz.timezone("UTC"))
    else:
        if players_database[sms_from][CALLERNAME] == "":
            response = check_sms_for_name(msid, sms_from, body_of_sms)
        players_database[sms_from][RECENTCALL] = dt.datetime.now(pytz.timezone("UTC"))
    return response


@logger.catch
def ask_caller_their_name():
    logger.info("Asking the caller their name.")
    return "Hello! I don't have your number in my records. Could you please tell me your name?"


@logger.catch
def check_sms_for_name(msid, sms_from, body_of_sms):
    # Function to extract the proper names from free form text.
    logger.info("Searching the sms for the callers name.")
    callername = ProperNounExtractor(body_of_sms)
    if callername == "Changename":
        callername = body_of_sms.split()[1]  # Kludge
    if callername != None:
        logger.info("Found a name:")
        logger.info(callername)
        Send_SMS(f"New Caller is: {callername}", CONTROLLER)
        players_database[sms_from][CALLERNAME] = callername
    else:
        logger.info("Couldn't find a name.")
        return "Sorry. I didn't understand.  Please try again. Feel free to speak in full sentences."
    return f"Thanks {callername}! Glad to meet you. Welcome to SpeedTrivia."


if __name__ == "__main__":
    try:

        # Begin logging definition
        logger.remove()  # removes the default console logger provided by Loguru.
        # I find it to be too noisy with details more appropriate for file logging.
        # create a new log file for each run of the program
        logger.add(
            f"{FILENAME}_{PROGRAM_START_TIME.strftime('%Y%m%d_%H%M%S%Z')}.log",
            rotation="Sunday",
            level="DEBUG",
            encoding="utf8",
        )
        # end logging setup
        logger.info("Program started.")

        logger.info("Program is being run as __main__")

        @logger.catch
        def ReturnCommandList(msid, sms_from, body_of_sms):
            return str(COMMANDS.keys())

        COMMANDS = {
            "Commands": ReturnCommandList,  # return this list of keys.
            "Webform": Send_Webform_help,  # provide a clickable link to the webform.
            "Common": Send_common_commands_help,  # provide help using most common commands.
            "Minus": RemoveReservation,  # remove a +1 from the caller's table.
            "Table": ReturnTableName,  # return callers table name.
            "Status": ReturnStatus,  # return caller status info.
            "Plus": AddReservation,  # add another +1 to the caller's table.
            "Funny": SuggestFunny,  # return a random "funny" team name from a list.
            "Serious": SuggestSerious,  # return a "serious" team name.
            "ChangeName": ChangePlayerName,  # delete the player name and ask for a new one.
            "ChangeTeam": SetTeamName,  # delete the team name and ask for a new one.
            "time": ReturnHelpInfo,  # return the HELP file with info on start time of game.
            "Helpme": ReturnHelpInfo,  # return the HELP file with info on using the app.
            "Shuffle": ShuffleTables,  # CONTROLLER ONLY: re-shuffle table assignments.
            "Start": StartGame,  # CONTROLLER ONLY: Lock-in the table assignments for thid game night.
            "Size": ChangeTeamSize,  # CONTROLLER ONLY: Change the number of players per table.
            "Announcement": Send_Announcement,  # CONTROLLER ONLY: Make a SMS note to all registered players.
            "PlayersList": Send_players_list,  # CONTROLLER ONLY: Return a list of ALL players to CONTROLLER.
        }
        CONTROLLER_ONLY_COMMANDS = [
            "Announcement",
            "PlayersList",
            "Shuffle",
            "Start",
            "Size",
        ]

        Send_SMS("SpeedTrivia program start.", CONTROLLER)

        # Save a dictionary into a pickle file.
        import pickle  # TODO put all of pickle code into seperate .py file and import

        # export commands GetDB() and PutDB()
        if DATABASE_PATHOBJ.exists():
            logger.info("Recovering pickle database...")
            players_database = pickle.load(open(DATABASE_PATHOBJ, "rb"))
        else:
            logger.info("Creating new pickle database...")
            pickle.dump(players_database, open(DATABASE_PATHOBJ, "wb"))

        logger.info("Instantiating Flask App:")
        SpeedTriviaApp = Flask(__name__)
        logger.info(SpeedTriviaApp)

        @SpeedTriviaApp.route("/sms", methods=["GET", "POST"])
        def sms_reply():
            """Respond to incoming calls.
            This is the entrypoint for SpeedTrivia functionality.
            """
            # log this number to track memory useage and monitor for memory leaks.
            memory_footprint = sys.getallocatedblocks()
            logger.debug(f"Running program footprint is: {memory_footprint}")
            logger.info("Message received:")
            sms_body = request.values.get("Body", None)
            sms_from = request.values.get("From", None)
            sms_MSID = request.values.get("MessageSid", None)
            logger.info(sms_MSID)
            logger.info(sms_from)
            logger.info(sms_body)
            # Generate an appropriate response (if any)
            reply = Respond_to(sms_MSID, sms_from, sms_body)
            if reply == "":
                logger.info("No response needed.")
                reply = "Thank you."
            elif reply == None:
                logger.error(f'Respond_to function returned "None".')
                reply = "Unknown system error. Please try again."
            Send_SMS(reply, sms_from)
            logger.info("Updating database...")
            pickle.dump(players_database, open(DATABASE_PATHOBJ, "wb"))
            logger.info("Returning control to Flask.")
            return reply

        # Hand control to Flask
        SpeedTriviaApp.run()
        # Flask does not return here during exceptions or ctrl-c
        logger.info("Program ended nominally.")
        sys.exit(0)
    except Exception as e:
        logger.info("Program terminated with exception:")
        logger.info(str(e))
        sys.exit(0)
