# -*- coding: utf-8 -*-
"""SpeedTriva takes input from individual players via SMS using Twillio service.
Players can send their name by text and get back the names of their teammates.
Teams are "Randomly" assigned. 
This app tracks players from past events and strives to assign players together
that have not been at the same table before (like speed dating). 
Player can provide their personal name to the app and include a +1 (or +2 or more) 
to their name to reserve extra seats at their table.
FUNCTIONALITY:
    Incoming SMS;
        First ever incoming SMS becomes Control-Node.
            After that all new numbers are considered players.
                (Control is also player)
        Players can provide details like:
            Name, Team Size(are they alone or have brought partner(s)), 
            Whois (responds with names of other players assigned to table),
            Decline (Ask to be reassigned to different table),
            Team-Name (set it or ask for it), Name-suggestions (offer silly team name),
        Control can provide same as above, plus;
            Shuffle (re-shuffles players), Set-size (set the target size of each table),
            Table-list (returns list of all players and assignments),
            Send-Assignments (sends each player their tablename (e.g. epsilon, gamma, delta...)),

MINIMUM FUNCTIONALITY:
    Default table size equals 4.
    Incoming SMS is placed in the database and body of SMS is used as name and +n value.
        duplicate SMS phone numbers just updates the name and +n values.
    Control can Shuffle tables and send assignments to players.
    No stateful memory is needed between nights a this level.

CRAZY FUTURE FUNCTIONALITY:
    Player can provide the answer to the trivia question by SMS and SpeedTrivia will submit it 
    to the trivia host by filling in the jotform used for answers that night.

    CONTROLLER can provide actual answers for storage in the database and matching to the provided
    answers from the teams to keep score automatically within the app. (Alternately the player can
    tell SpeedTrivia when they get a question right so the score can be kept.)

# NOTE: On 4-8-2021 I decided to use PythonAnywhere.com to host this code. 
    It can be accessed at Conradical.pythonanywhere.com/sms
    Twilio.com sends incoming texts from the number (812)203-8235 to the address above.
    The resulting string generated by sms_reply() is then returned to the player.
    An empty string from sms_reply() returns nothing and generates no return text.
    At this time I do not use environment variables at PA.com
    I simply cut and paste the un-encrypted secrets into the code at PA.com
    That code doesn't get pushed to GIT ever so the secrets are fairly safe.

# NOTE: Reading the Twilio website I learned about ngrok.exe
    ngrok is available for all computer platforms and creates tunnels from localhost to the public internet.
    Using ngrok allows testing servers like flask running on localhost with internet resources like Twilio.
    During developement of a webapp like SpeedTriva ngrok allows me to point Twilio at my localhost for testing.
    Deployment to production can then point Twilio back to Conradical.pythonAnywhere.com 
    
"""
HELPFUL_INFO = """Welcome to SpeedTrivia. SpeedTrivia is designed to be a tool that
matches players with other players randomly. If you brought a favorite player with you
then simply reply to this number with 'Add a plus one to my table'. You can add as many
seats as you need. Thanks for attending!
"""
TIME_INFO = """Trivia at Mac's Hideaway is Tuesday nights 
starting promptly at 7pm and runs 2 hours. """
WEBFORM_HELP = (
    """The website for entering your answers is: tinyurl.com/cemacshideaway"""
)
MOST_COMMON_HELP = """Common commands are add/remove plus ones. 
"Minus 1" removes 1. 
"Plus 2" adds 2 extra players.
"Status" tells you how many plus ones you have."""
# Download the twilio-python library from twilio.com/docs/libraries/python
import sys
import time
from collections import defaultdict
import pickle
import pytz
import datetime as dt
from flask import Flask, request, redirect
from pprint import pformat as pprint_dicts
from loguru import logger


from pathlib import Path

import random

# import our private repo of functions and constants
import ST_common as stc
import ST_twilio as tw
from Webform_filler import Check_for_webform_answer_submission

FILENAME = __file__
FILENAME_PATHOBJ = Path(__file__)
PROGRAM_START_TIME = dt.datetime.now(pytz.timezone("UTC"))


# Begin logging definition
logger.remove()  # removes the default console logger provided by Loguru.
# I find it to be too noisy with details more appropriate for file logging.
# create a new log file for each run of the program
logger.add(
    "".join([FILENAME, "_{time}.log"]),
    rotation="Sunday",
    level="DEBUG",
    encoding="utf8",
)
# end logging setup
logger.info("Program started.")


# some of the basic commands. The others are in ST_common.py
def ReturnCommandList(msid, sms_from, body_of_sms):
    return str(COMMANDS.keys())

def Send_common_commands_help(msid, sms_from, body_of_sms):
    logger.debug("".join(["User: ", stc.players_database[sms_from][stc.CALLERNAME], " asked for Form-Help."]))
    return MOST_COMMON_HELP

def Send_Webform_help(msid, sms_from, body_of_sms):
    logger.debug("".join(["User: ", stc.players_database[sms_from][stc.CALLERNAME], " asked for Form-Help."]))
    return WEBFORM_HELP

def ReturnHelpInfo(msid, sms_from, body_of_sms):
    """Returns basic info about this app and the trivia competition."""
    logger.info("Help info function entered.")
    return HELPFUL_INFO



COMMANDS = {
    "Commands": ReturnCommandList,  # return this list of keys.
    "Webform": Send_Webform_help,  # provide a clickable link to the webform.
    "Common": Send_common_commands_help,  # provide help using most common commands.
    "time": ReturnHelpInfo,  # return the HELP file with info on start time of game.
    "Helpme": ReturnHelpInfo,  # return the HELP file with info on using the app.    
    "Minus": stc.RemoveReservation,  # remove a +1 from the caller's table.
    "Table": stc.ReturnTableName,  # return callers table name.
    "Team": stc.SetTeamName,  # return Team name if exists or ask if None.
    "Status": stc.ReturnStatus,  # return caller status info.
    "Plus": stc.AddReservation,  # add another +1 to the caller's table.
    "Funny": stc.SuggestFunny,  # return a random "funny" team name from a list.
    "Serious": stc.SuggestSerious,  # return a "serious" team name.
    "Change-Name": stc.ChangePlayerName,  # delete the player name and ask for a new one.
    "Change-Team": stc.ChangeTeamName,  # delete the team name and ask for a new one.
    "Shuffle": stc.ShuffleTables,  # CONTROLLER ONLY: re-shuffle table assignments.
    "Start": stc.StartGame,  # CONTROLLER ONLY: Lock-in the table assignments for thid game night.
    "Size": stc.ChangeTeamSize,  # CONTROLLER ONLY: Change the number of players per table.
    "Announcement": stc.Send_Announcement,  # CONTROLLER ONLY: Make a SMS note to all registered players.
    "Players-list": stc.Send_players_list,  # CONTROLLER ONLY: Return a list of ALL players to CONTROLLER.
}
CONTROLLER_ONLY_COMMANDS = [
    "Announcement",
    "Players-list",
    "Shuffle",
    "Start",
    "Size",
]

# Save a dictionary into a pickle file.
if stc.DATABASE_PATHOBJ.exists():
    logger.info("Recovering pickle database...")
    stc.players_database = pickle.load(open(stc.DATABASE_PATHOBJ, "rb"))
else:
    logger.info("Creating new pickle database...")
    pickle.dump(stc.players_database, open(stc.DATABASE_PATHOBJ, "wb"))


tw.Send_SMS("SpeedTrivia program start.", stc.CONTROLLER)

logger.info("Instantiating Flask App:")
SpeedTriviaApp = Flask(__name__)
logger.info(SpeedTriviaApp)

@SpeedTriviaApp.route("/sms", methods=["GET", "POST"])
def sms_reply():
    """Respond to incoming calls.
    This is the entrypoint for SpeedTrivia functionality.
    """
    # log this number to track memory useage and monitor for memory leaks.
    memory_footprint = sys.getallocatedblocks()
    logger.debug("".join(["Running program footprint is: ", str(memory_footprint)]))
    logger.info("Message received:")
    sms_body = request.values.get("Body", None)
    sms_from = request.values.get("From", None)
    sms_MSID = request.values.get("MessageSid", None)
    logger.info(sms_MSID)
    logger.info(sms_from)
    logger.info(sms_body)
    # Start our TwiML response by creating a new response object.
    sms_response = tw.MessagingResponse()
    logger.info(sms_response)
    # Generate an appropriate response (if any)
    reply = Respond_to(sms_MSID, sms_from, sms_body)
    if reply == "":
        logger.info("No response needed.")
    else:
        logger.info(reply)
    sms_response.message(reply)
    logger.info(str(sms_response))
    logger.info("Updating database...")
    pickle.dump(stc.players_database, open(stc.DATABASE_PATHOBJ, "wb"))
    logger.info("Returning control to Flask.")
    return str(sms_response)




def Respond_to(msid, sms_from, body_of_sms):
    response = update_caller_database(msid, sms_from, body_of_sms)
    logger.info(pprint_dicts(stc.players_database[sms_from]))
    cmnds = COMMANDS.keys()
    logger.info(cmnds)
    for word in cmnds:
        if word.lower() in str(body_of_sms).lower():
            logger.info("".join(["Found command: ", word]))
            if word in CONTROLLER_ONLY_COMMANDS:
                if sms_from == stc.CONTROLLER:
                    response = COMMANDS[word](msid, sms_from, body_of_sms)
                else:
                    logger.info("Command not available to this user.")
                    response = "Sorry, That command is only available to the CONTROLLER of this app."
            else:
                response = COMMANDS[word](msid, sms_from, body_of_sms)
            # TODO break loop here to stop after first command word found.
        else:
            logger.debug("".join(["Did not find ", word, " in ", str(body_of_sms)]))
    else:
        logger.info("No command words found in this SMS.")
        response = Check_for_webform_answer_submission(msid, sms_from, body_of_sms)
    return response


def update_caller_database(msid, sms_from, body_of_sms):
    response = "The Robots are coming!  LoL  Head for the hills "
    response = "".join([response, stc.players_database[sms_from][stc.CALLERNAME]])
    stc.players_database[sms_from][stc.MESSAGE_HISTORY].append((body_of_sms, msid))
    messages_list = stc.players_database[sms_from][stc.MESSAGE_HISTORY]
    # truncate list at last 5 messages.
    stc.players_database[sms_from][stc.MESSAGE_HISTORY] = messages_list[-5:]
    logger.info("".join(["Caller's Name: ", stc.players_database[sms_from][stc.CALLERNAME]]))
    if stc.players_database[sms_from][stc.FIRSTCALL] == None:
        logger.info("First time caller.")
        tw.Send_SMS("New Caller logged.", stc.CONTROLLER)
        stc.players_database[sms_from][stc.FIRSTCALL] = dt.datetime.now(pytz.timezone("UTC"))
        response = stc.ask_caller_their_name()
        stc.players_database[sms_from][stc.RECENTCALL] = dt.datetime.now(pytz.timezone("UTC"))
    else:
        if stc.players_database[sms_from][stc.CALLERNAME] == "":
            response = stc.check_sms_for_name(msid, sms_from, body_of_sms)
        stc.players_database[sms_from][stc.RECENTCALL] = dt.datetime.now(pytz.timezone("UTC"))
    return response


if __name__ == "__main__":
    try:
        logger.info("Program is being run as __main__")
        SpeedTriviaApp.run()
        # Flask does not return here during exceptions or ctrl-c
        logger.info("Program ended nominally.")
        sys.exit(0)
    except Exception as e:
        logger.info("Program terminated with exception:")
        logger.info(str(e))
        sys.exit(0)
