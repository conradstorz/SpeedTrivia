# -*- coding: utf-8 -*-
"""SpeedTriva takes input from individual players via SMS using Twillio service.
Players can send their name by text and get back the names of their teammates.
Teams are "Randomly" assigned. 
This app tracks players from past events and strives to assign players together
that have not been at the same table before (like speed dating). 
Player can provide their personal name to the app and include a +1 (or +2 or more) 
to their name to reserve extra seats at their table.
FUNCTIONALITY:
    Incoming SMS;
        First ever incoming SMS becomes Control-Node.
            After that all new numbers are considered players.
                (Control is also player)
        Players can provide details like:
            Name, Team Size(are they alone or have brought partner(s)), 
            Whois (responds with names of other players assigned to table),
            Decline (Ask to be reassigned to different table),
            Team-Name (set it or ask for it), Name-suggestions (offer silly team name),
        Control can provide same as above, plus;
            Shuffle (re-shuffles players), Set-size (set the target size of each table),
            Table-list (returns list of all players and assignments),
            Send-Assignments (sends each player their tablename (e.g. epsilon, gamma, delta...)),

MINIMUM FUNCTIONALITY:
    Default table size equals 4.
    Incoming SMS is placed in the database and body of SMS is used as name and +n value.
        duplicate SMS phone numbers just updates the name and +n values.
    Control can Shuffle tables and send assignments to players.
    No stateful memory is needed between nights a this level.

CRAZY FUTURE FUNCTIONALITY:
    Player can provide the answer to the trivia question by SMS and SpeedTrivia will submit it 
    to the trivia host by filling in the jotform used for answers that night.

    Controller can provide actual answers for storage in the database and matching to the provided
    answers from the teams to keep score automatically within the app. (Alternately the player can
    tell SpeedTrivia when they get a question right so the score can be kept.)

# NOTE: On 4-8-2021 I decided to use PythonAnywhere.com to host this code. 
    It can be accessed at Conradical.pythonanywhere.com/sms
    Twilio.com sends incoming texts from the number (812)203-8235 to the address above.
    The resulting string generated by sms_reply() is then returned to the player.
    An empty string from sms_reply() returns nothing and generates no return text.
    At this time I do not use environment variables at PA.com
    I simply cut and paste the un-encrypted secrets into the code at PA.com
    That code doesn't get pushed to GIT ever so the secrets are fairly safe.

# NOTE: Reading the Twilio website I learned about ngrok.exe
    ngrok is available for all computer platforms and creates tunnels from localhost to the public internet.
    Using ngrok allows testing servers like flask running on localhost with internet resources like Twilio.
    During developement of a webapp like SpeedTriva ngrok allows me to point Twilio at my localhost for testing.
    Deployment to production can then point Twilio back to Conradical.pythonAnywhere.com 
    
"""

# Download the twilio-python library from twilio.com/docs/libraries/python
import os
import sys
from twilio.rest import Client
from flask import Flask, request, redirect
from twilio.twiml.messaging_response import MessagingResponse
from loguru import logger
from pprint import pformat as pprint_dicts
import datetime as dt
from pathlib import Path
import pytz
import nltk

nltk.download("punkt")
nltk.download("stopwords")
nltk.download("averaged_perceptron_tagger")
from nltk.corpus import stopwords
from collections import defaultdict
import random

FILENAME = __file__
FILENAME_PATHOBJ = Path(__file__)
PROGRAM_START_TIME = dt.datetime.now(pytz.timezone("UTC"))
def how_long_ago_is(past_time):
    delta_ = dt.datetime.now(pytz.timezone("UTC")) - past_time
    days_ = delta_ / dt.timedelta(days=1)
    logger.debug("".join(["Time since ", str(days_)]))
    return days_
TWILLIO_SMS_NUMBER = "+18122038235"  # Paoli native number bought from Twilio
DATABASE_PATHOBJ = Path("".join([FILENAME, ".db"]))
TABLESIZE = 3
CONTROLLER = "+18125577095"
FROZEN = False

# Begin logging definition
logger.remove()  # removes the default console logger provided by Loguru.
# I find it to be too noisy with details more appropriate for file logging.
# create a new log file for each run of the program
logger.add(
    "".join([FILENAME, "_{time}.log"]),
    rotation="Sunday",
    level="DEBUG",
    encoding="utf8",
)
# end logging setup
logger.info("Program started.")

# begin definition of default dict for players
CALLERNAME_KEY = "Caller_name"
FIRSTCALL_KEY = "First_call"
RECENTCALL_KEY = "Recent_Call"
PLUSONE_KEY = "Plus_one"
PARTNERHISTORY_KEY = "Partners_history"
MESSAGEHISTORY_KEY = "Message_history"
CURRENT_TABLE_ASSIGNMENT = "Current_Table"
CURRENT_TEAM_NAME = "Current_team"


def dict_default():
    sample_player_dict = {
        CALLERNAME_KEY: "",
        CURRENT_TABLE_ASSIGNMENT: "Undefined",
        CURRENT_TEAM_NAME: "notset",
        PLUSONE_KEY: int(0),  # represents number of extra seats reserved at the table
        PARTNERHISTORY_KEY: [],
        MESSAGEHISTORY_KEY: [],
        FIRSTCALL_KEY: None,
        RECENTCALL_KEY: None,
    }
    return sample_player_dict


players_database = defaultdict(dict_default)
players_database["root"] = "root"


def ReturnCommandList(msid, sms_from, body_of_sms):
    return str(COMMANDS.keys())

def AddReservation(msid, sms_from, body_of_sms):
    """Add a +1 to this players table."""
    logger.info("Add a plue one function entered.")
    players_database[sms_from][PLUSONE_KEY] += 1
    return "".join(
        [
            "You now have ",
            str(players_database[sms_from][PLUSONE_KEY] + 1),
            " reserved seats at your table counting yourself.",
        ]
    )

def RemoveReservation(msid, sms_from, body_of_sms):
    """Players can reserve extra seats at their table for special guests.
    Those guests don't register with this app on their own they just sit
    at the same table by design. (e.g. a non-player or spouse.)
    """
    logger.info("Remove a plus one from player function entered.")
    if players_database[sms_from][PLUSONE_KEY] > 0:
        players_database[sms_from][PLUSONE_KEY] -= 1
    return "".join(
        [
            "You now have ",
            str(players_database[sms_from][PLUSONE_KEY] + 1),
            " reserved seats at your table counting yourself.",
        ]
    )

def ReturnTableName(msid, sms_from, body_of_sms):
    """Table name is an index value. (e.g. Gamma, delta, epsilon...)"""
    logger.info("return player team table label function entered.")
    return "".join(
        ["Your table is ", players_database[sms_from][CURRENT_TABLE_ASSIGNMENT], "."]
    )

def SetTeamName(msid, sms_from, body_of_sms):
    """Team name is the formal name. (e.g. 'Fools for the Trivia')
    When entered for one player applies for all at table.
    """
    logger.info("Set team name function entered.")
    return msid

def list_players_in_database(tonight=False):
    tp_list = []
    # Filter out records from past weeks if tonight equal False.
    for k in players_database.keys():
        if len(k) == 12:  # ignore entries that are not phone numbers
            dlta = how_long_ago_is(players_database[k][RECENTCALL_KEY])
            if tonight:
                if dlta < 1:    
                    tp_list.append(k)
            else:
                tp_list.append(k)
    return tp_list

def Tonights_players():
    return list_players_in_database(tonight=True)

def ReturnStatus(msid, sms_from, body_of_sms):
    """Return various details of this player."""
    logger.info("Send status to player function entered.")
    if sms_from == CONTROLLER:
        stat = "".join(
            [
                "status: ",
                str(TABLESIZE),
                " per table. ",
                str(len(Tonights_players())),
                " players registered.",
            ]
        )
    else:
        stat = "".join(
            [
                players_database[sms_from][CALLERNAME_KEY],
                " your table name is ",
                players_database[sms_from][CURRENT_TABLE_ASSIGNMENT],
                " and you have ",
                players_database[sms_from][CURRENT_TABLE_ASSIGNMENT],
                " extra seats reserved.",
            ]
        )
    return stat

def SuggestFunny(msid, sms_from, body_of_sms):
    """Return some ideas for team names."""
    logger.info("Funny team name suggestions entered.")
    return msid

def SuggestSerious(msid, sms_from, body_of_sms):
    """Suggest only serious names."""
    logger.info("Serious team name suggestions entered.")
    return msid

def ChangePlayerName(msid, sms_from, body_of_sms):
    """Allow player to correct their own name."""
    logger.info("Change players name function entered.")
    return msid

def ChangeTeamName(msid, sms_from, body_of_sms):
    """Allow player to change the name of their team.
    This will work best after the night has been started
    and the table assignments have been set. This functionality
    is only useful for automated game answers processing.
    """
    logger.info("Change team name function entered.")
    return msid

def ReturnHelpInfo(msid, sms_from, body_of_sms):
    """Returns basic info about this app and the trivia competition."""
    logger.info("Help info function entered.")
    return msid

def ShuffleTables(msid, sms_from, body_of_sms):
    """Primary function of this app is to match players to tables.
    This function 'randomly' assigns players to tables taking into account
    the max table size, the plus ones, players that have previously played together.
    Shuffle will try repeatedly to find a solution that exposes the maximum number of
    players to players that they have not played against before.
    """

    def extra_players(player_list):
        plus_ones = 0
        for player in player_list:  # Find all the extra players in this list.
            plus_ones += players_database[player][PLUSONE_KEY]
        logger.debug("".join([str(plus_ones), " Extra players"]))
        return plus_ones

    def Assign_Tables(tables, players):
        def open_chairs(table):
            open_chrs = TABLESIZE - (len(table) + extra_players(table))
            logger.debug("".join([str(open_chrs), " Open chairs."]))
            if open_chrs < 1:
                return 0
            return open_chrs

        tbl_dict = defaultdict(list)
        for player in players:
            while player != None:
                rnd_table = random.choice(tables)
                logger.debug("".join([str(rnd_table), " random table."]))
                if open_chairs(tbl_dict[rnd_table]) > 0:
                    tbl_dict[rnd_table].append(player)
                    logger.debug("".join([player, " assigned to table."]))
                    player = None
        return tbl_dict

    table_names = [
        "gamma",
        "epsilon",
        "delta",
        "alpha",
        "kappa",
        "sigma",
        "beta",
        "theta",
    ]
    logger.info("Shuffle players function entered.")
    registered_players = Tonights_players()
    logger.debug(
        "".join(
            [
                str(registered_players),
                " Tonights players.",
            ]
        )
    )
    total_players = len(registered_players) + extra_players(registered_players)
    logger.debug("".join([str(total_players), " Total players."]))
    number_of_tables = int(total_players / TABLESIZE) + 1
    if number_of_tables < 1:
        number_of_tables = 1
    tables = table_names[:number_of_tables]
    logger.debug("".join([str(tables), " Tonights tables."]))
    proposed_tables = Assign_Tables(tables, registered_players)
    logger.info(pprint_dicts(proposed_tables))
    return "Players have been assigned tables."

def StartGame(msid, sms_from, body_of_sms):
    """Locks-in the table assignments and updates each player's database to record
    the event of these players being at the same table.
    """
    logger.info("Start game night entered.")
    for player in players_database.keys():
        if player != "root":  # Skip the non player entry.
            pass
            # if players_database[player][RECENTCALL_KEY] == Today:
            # set players tablename
            # add other players from table to history list
            # (increment times players have met)
    return msid

def ChangeTeamSize(msid, sms_from, body_of_sms):
    """Sets the maximum target size for tables.
    Due to players having +1's some tables could go over this limit.
    Generaly that will only happen if a team wants to have more +1's than
    the normal table size.
    """
    global TABLESIZE  # needed because I want to change the global value
    logger.info("Change team size function entered.")
    parts = str(body_of_sms).split()
    number = 0
    for part in parts:
        try:
            number = int(part)
        except:
            pass
    if number > 0:
        TABLESIZE = number
    else:
        return "Error. New table size not understood."
    return "".join(["New table size = ", str(TABLESIZE)])

COMMANDS = {
    "Commands": ReturnCommandList,  # return this list of keys.
    "Minus": RemoveReservation,  # remove a +1 from the caller's table.
    "Table": ReturnTableName,  # return callers table name.
    "Team": SetTeamName,  # return Team name if exists or ask if None.
    "Status": ReturnStatus,  # return caller status info.
    "Plus": AddReservation,  # add another +1 to the caller's table.
    "Funny": SuggestFunny,  # return a random "funny" team name from a list.
    "Serious": SuggestSerious,  # return a "serious" team name.
    "ChangeName": ChangePlayerName,  # delete the player name and ask for a new one.
    "ChangeTeam": ChangeTeamName,  # delete the team name and ask for a new one.
    "time": ReturnHelpInfo,  # return the HELP file with info on start time of game.
    "Help": ReturnHelpInfo,  # return the HELP file with info on using the app.
    "Shuffle": ShuffleTables,  # CONTROLLER ONLY: re-shuffle table assignments.
    "Start": StartGame,  # CONTROLLER ONLY: Lock-in the table assignments for thid game night.
    "Size": ChangeTeamSize,  # CONTROLLER ONLY: Change the number of players per table.
}
CONTROLLER_ONLY_COMMANDS = [
    "Shuffle",
    "Start",
    "Size",
]

# Save a dictionary into a pickle file.
import pickle

# pickle.dump( players_database, open( DATABASE_PATHOBJ, "wb" ) )
# retrieve database:
# players_database = pickle.load( open( DATABASE_PATHOBJ, "rb" ) )
if DATABASE_PATHOBJ.exists():
    logger.info("Recovering pickle database...")
    players_database = pickle.load(open(DATABASE_PATHOBJ, "rb"))
else:
    logger.info("Creating new pickle database...")
    pickle.dump(players_database, open(DATABASE_PATHOBJ, "wb"))


# Twilio token setup:
CLIENT = None
if not os.system("set ACCOUNT_SID"):  # are these return values inverted?
    logger.info("Twilio ACCOUNT_SID found.")
    if not os.system(
        "set AUTH_TOKEN"
    ):  # seems like they would be true if the value exists.
        logger.info("Twilio AUTH_TOKEN found, registering Twilio Client...")
        ACCOUNT_SID = os.environ.get("ACCOUNT_SID")
        AUTH_TOKEN = os.environ.get("AUTH_TOKEN")
        CLIENT = Client(ACCOUNT_SID, AUTH_TOKEN)
        logger.info("Client token created:")
        logger.info(CLIENT)
if CLIENT == None:
    print("Client token not set. Did you load the environment variables?")
    print("Did you re-start VScode?")
    sys.exit(1)


def Send_SMS(text, receipient):
    return CLIENT.messages.create(body=text, from_=TWILLIO_SMS_NUMBER, to=receipient)


print(Send_SMS("SpeedTrivia program start.", "+18125577095"))

logger.info("Instantiating Flask App:")
SpeedTriviaApp = Flask(__name__)
logger.info(SpeedTriviaApp)


@SpeedTriviaApp.route("/sms", methods=["GET", "POST"])
def sms_reply():
    """Respond to incoming calls.
    This is the entrypoint for SpeedTrivia functionality.
    """
    logger.info("Message received:")
    sms_body = request.values.get("Body", None)
    sms_from = request.values.get("From", None)
    sms_MSID = request.values.get("MessageSid", None)
    logger.info(sms_MSID)
    logger.info(sms_from)
    logger.info(sms_body)
    # Start our TwiML response by creating a new response object.
    sms_response = MessagingResponse()
    logger.info(sms_response)
    # Generate an appropriate response (if any)
    reply = Respond_to(sms_MSID, sms_from, sms_body)
    if reply == "":
        logger.info("No response needed.")
    else:
        logger.info(reply)
    sms_response.message(reply)
    logger.info(str(sms_response))
    logger.info("Updating database...")
    pickle.dump(players_database, open(DATABASE_PATHOBJ, "wb"))
    logger.info("Returning control to Flask.")
    return str(sms_response)


def Respond_to(msid, sms_from, body_of_sms):
    response = update_caller_database(msid, sms_from, body_of_sms)
    logger.info(pprint_dicts(players_database[sms_from]))
    cmnds = COMMANDS.keys()
    logger.info(cmnds)
    for word in cmnds:
        if word.lower() in str(body_of_sms).lower():
            logger.info("".join(["Found command: ", word]))
            if word in CONTROLLER_ONLY_COMMANDS:
                if sms_from == CONTROLLER:
                    response = COMMANDS[word](msid, sms_from, body_of_sms)
                else:
                    logger.info("Command not available to this user.")
                    response = "Sorry, That command is only available to the controller of this app."
            else:
                response = COMMANDS[word](msid, sms_from, body_of_sms)
        else:
            logger.debug("".join(["Did not find ", word, " in ", str(body_of_sms)]))
    else:
        logger.info("No command words found in this SMS.")
    return response


def update_caller_database(msid, sms_from, body_of_sms):
    response = "The Robots are coming!  LoL  Head for the hills "
    response = "".join([response, players_database[sms_from][CALLERNAME_KEY]])
    players_database[sms_from][MESSAGEHISTORY_KEY].append((body_of_sms, msid))
    messages_list = players_database[sms_from][MESSAGEHISTORY_KEY]
    # truncate list at last 5 messages.
    players_database[sms_from][MESSAGEHISTORY_KEY] = messages_list[-5:]
    logger.info(
        "".join(["Caller's Name: ", players_database[sms_from][CALLERNAME_KEY]])
    )
    if players_database[sms_from][FIRSTCALL_KEY] == None:
        logger.info("First time caller.")
        players_database[sms_from][FIRSTCALL_KEY] = dt.datetime.now(
            pytz.timezone("UTC")
        )
        response = ask_caller_their_name()
        players_database[sms_from][RECENTCALL_KEY] = dt.datetime.now(
            pytz.timezone("UTC")
        )
    else:
        if players_database[sms_from][CALLERNAME_KEY] == "":
            response = check_sms_for_name(msid, sms_from, body_of_sms)
        players_database[sms_from][RECENTCALL_KEY] = dt.datetime.now(
            pytz.timezone("UTC")
        )
    return response


def ask_caller_their_name():
    logger.info("Asking the caller their name.")
    return "Hello! I don't have your number in my records. Could you please tell me your name?"


def check_sms_for_name(msid, sms_from, body_of_sms):
    # Function to extract the proper nouns from free form text.
    def ProperNounExtractor(text):
        # if text is only a single word, like 'Doug', this routine does not identify it as a name.
        sentences = nltk.sent_tokenize(text)
        for sentence in sentences:
            words = nltk.word_tokenize(sentence)
            words = [
                word for word in words if word not in set(stopwords.words("english"))
            ]
            tagged = nltk.pos_tag(words)
            for (word, tag) in tagged:
                if tag == "NNP":  # If the word is a proper noun
                    return word
        return None

    logger.info("Searching the sms for the callers name.")
    callername = ProperNounExtractor(body_of_sms)
    if callername != None:
        logger.info("Found a name:")
        logger.info(callername)
        players_database[sms_from][CALLERNAME_KEY] = callername
    else:
        logger.info("Couldn't find a name.")
        return "Sorry. I didn't understand.  Please try again. Feel free to speak in full sentences."
    return "".join(
        ["Thanks ", callername, "! Glad to meet you. Welcome to SpeedTrivia."]
    )

if __name__ == "__main__":
    try:
        logger.info("Program is being run as __main__")
        SpeedTriviaApp.run(debug=True)
        logger.info("Program ended nominally.")
        sys.exit(0)
    except Exception as e:
        logger.info("Program terminated with exception:")
        logger.info(str(e))
        sys.exit(0)
